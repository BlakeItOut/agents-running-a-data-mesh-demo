#!/bin/bash
# Setup script to populate agents/.env from Terraform outputs
#
# Usage:
#   cd terraform && terraform apply
#   cd .. && ./scripts/setup-agents-env.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}=======================================${NC}"
echo -e "${GREEN}  Agents .env Setup Script${NC}"
echo -e "${GREEN}=======================================${NC}"
echo ""

# Check if terraform directory exists
if [ ! -d "terraform" ]; then
    echo -e "${RED}Error: terraform/ directory not found${NC}"
    echo "Please run this script from the repository root"
    exit 1
fi

# Check if terraform state exists
if [ ! -f "terraform/terraform.tfstate" ]; then
    echo -e "${RED}Error: terraform.tfstate not found${NC}"
    echo "Please run 'terraform apply' first in the terraform/ directory"
    exit 1
fi

echo -e "${YELLOW}Extracting Terraform outputs...${NC}"

# Extract terraform outputs
cd terraform
TERRAFORM_OUTPUT=$(terraform output -json)
cd ..

# Parse JSON outputs
KAFKA_BOOTSTRAP=$(echo "$TERRAFORM_OUTPUT" | jq -r '.kafka_bootstrap_endpoint.value')
KAFKA_API_KEY=$(echo "$TERRAFORM_OUTPUT" | jq -r '.kafka_api_key.value')
KAFKA_API_SECRET=$(echo "$TERRAFORM_OUTPUT" | jq -r '.kafka_api_secret.value')
SCHEMA_REGISTRY_URL=$(echo "$TERRAFORM_OUTPUT" | jq -r '.schema_registry_rest_endpoint.value')
SCHEMA_REGISTRY_API_KEY=$(echo "$TERRAFORM_OUTPUT" | jq -r '.schema_registry_api_key.value')
SCHEMA_REGISTRY_API_SECRET=$(echo "$TERRAFORM_OUTPUT" | jq -r '.schema_registry_api_secret.value')
CLUSTER_ID=$(echo "$TERRAFORM_OUTPUT" | jq -r '.cluster_id.value')
ENVIRONMENT_ID=$(echo "$TERRAFORM_OUTPUT" | jq -r '.environment_id.value')

# Prompt for Anthropic API key
echo ""
echo -e "${YELLOW}Anthropic API key is required for agents${NC}"
echo -e "Get yours from: ${GREEN}https://console.anthropic.com/${NC}"
read -p "Enter your Anthropic API key: " ANTHROPIC_API_KEY

if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo -e "${RED}Error: Anthropic API key is required${NC}"
    exit 1
fi

# Validate extracted values
if [ "$KAFKA_BOOTSTRAP" == "null" ] || [ -z "$KAFKA_BOOTSTRAP" ]; then
    echo -e "${RED}Error: Could not extract kafka_bootstrap_endpoint from Terraform${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}âœ“ Successfully extracted all Terraform outputs${NC}"
echo ""

# Create agents/.env
echo -e "${YELLOW}Creating agents/.env...${NC}"

cat > agents/.env <<EOF
# Agent Runtime Configuration (for bootstrap.py)
# Auto-generated by scripts/setup-agents-env.sh on $(date)
# Source: Terraform outputs + user input

# ============================================================================
# Kafka Cluster Configuration (CLUSTER-SPECIFIC)
# ============================================================================
KAFKA_BOOTSTRAP_ENDPOINT=$KAFKA_BOOTSTRAP
KAFKA_API_KEY=$KAFKA_API_KEY
KAFKA_API_SECRET=$KAFKA_API_SECRET

# ============================================================================
# Schema Registry Configuration
# ============================================================================
SCHEMA_REGISTRY_URL=$SCHEMA_REGISTRY_URL
SCHEMA_REGISTRY_API_KEY=$SCHEMA_REGISTRY_API_KEY
SCHEMA_REGISTRY_API_SECRET=$SCHEMA_REGISTRY_API_SECRET

# ============================================================================
# Claude API
# ============================================================================
ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY

# ============================================================================
# Optional: Cluster/Environment IDs
# ============================================================================
KAFKA_CLUSTER_ID=$CLUSTER_ID
KAFKA_ENVIRONMENT_ID=$ENVIRONMENT_ID
EOF

echo -e "${GREEN}âœ“ agents/.env created successfully!${NC}"
echo ""
echo -e "${GREEN}=======================================${NC}"
echo -e "${GREEN}  Setup Complete!${NC}"
echo -e "${GREEN}=======================================${NC}"
echo ""
echo "Next steps:"
echo -e "  1. Review: ${YELLOW}agents/.env${NC}"
echo -e "  2. Run: ${GREEN}cd agents && python bootstrap.py${NC}"
echo ""
