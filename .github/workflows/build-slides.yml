name: Build Google Slides Presentation

# Trigger on push to main branch
on:
  push:
    branches: [ main ]
  # Also allow manual trigger
  workflow_dispatch:

jobs:
  build-slides:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Install clasp CLI
      - name: Install clasp
        run: npm install -g @google/clasp

      # 4. Create .clasp.json file to link to the Apps Script project
      - name: Create .clasp.json
        run: |
          cat > .clasp.json << 'EOF'
          ${{ secrets.CLASP_JSON }}
          EOF

      # 5. Authenticate clasp with Google
      - name: Authenticate clasp
        run: |
          cat > ~/.clasprc.json << 'EOF'
          ${{ secrets.CLASPRC_JSON }}
          EOF

      # 6. Push the code to Apps Script
      - name: Push code to Apps Script
        run: |
          cd slides-src
          clasp push --force

      # 7. Trigger presentation rebuild via webhook
      - name: Trigger presentation rebuild
        run: |
          RESPONSE=$(curl -s -X POST "${{ secrets.SLIDES_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{"secret":"${{ secrets.SLIDES_WEBHOOK_SECRET }}"}')

          echo "Webhook response: $RESPONSE"

          # Check if successful
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "✅ Presentation rebuilt successfully!"
            PRES_URL=$(echo "$RESPONSE" | grep -o '"presentationUrl":"[^"]*"' | cut -d'"' -f4)
            echo "View at: $PRES_URL"
          else
            echo "❌ Presentation build failed"
            echo "$RESPONSE"
            exit 1
          fi
